<template>
  <view class="container">
    <view class="poster">
      <view class="casContainer" style="border:0 solid #f00; margin:0px auto;width:{{casStyle.imageWidth}}px;height:{{casStyle.imageHeight}}px;">
        <canvas @tap="preview" canvas-id="canvas"></canvas>
      </view>
      <view class="shareFriendsDesc">
        <image src="{{shareFriendsDesc}}"></image>
      </view>
    </view>
    <view class="shareFriendsButton" @tap="saveImgToAl">
      <image src="{{shareFriendsButton}}"></image>
    </view>
  </view>
</template>

<script>
import wx from "wepy";
import http from "../utils/request.js";
import config from "../config";
import mixin from "../mixins/redux";
let appId = config.AppID; //小程序appid  用作获取二维码

let tempPath = ""; //导出图片的临时路径
let text = "";

var ctx = null;// 使用 wx.createContext 获取绘图上下文 context
var canvasw = 0;
var canvash = 0;
var timer;

export default class poster extends wx.page {
  config = {
    navigationBarTitleText: "生成海报"
  };
  data = {
    casStyle: {
      imageWidth: 0,
      imageHeight: 0
    },
    money: 0,
    code: "",
    intro: "",

    posterSrc: "",
  };
  mixins = [mixin];
  methods = {

  };

  onLoad(options) {
    let id = options.id;
    this.getCanvasStyle();
    this.loop(id);

  };

  loop(id) {
    if(this.code != ""){
        this.draw();
        return;
    }

    this.getRecordInfo(id);
    this.getQrcode(id);
    timer = setTimeout(() => {
      this.loop(id);
      clearTimeout(timer);
    }, 1000);
  };

  //请求找人记录接口获取找人信息
  getRecordInfo(id) {
    console.log("getRecordInfo id:", id);
    http.request(
      "App.Find_Record.GetIntroRecord",
      "POST",
      {id: id},
      res => {

        this.money = res.money;
        this.intro = res.intro;
        this.code = res.code;
        console.log("res.code:", this.code);
      },
      err => {},
      {

      }
    );
  };

  //获取二维码
  getQrcode(id){
    console.log("GetQrcode");
    http.request(
      "App.Find_Wechat.GetQrcode",
      "POST",
      {width: 150, path: "/pages/intro?type=1&recordId=" + id},
      res => {
        this.posterSrc = 'data:image/png;base64,' + res;
        this.$apply();
      },
      err => {
        console.log("getQrcode error");
      }
    );
  };

  //设置canvas宽和高
  getCanvasStyle() {
    wx.getSystemInfo({
      success: function (res) {
        canvasw = res.windowWidth;//设备宽度
        canvash = res.windowHeight;
      }
    });

    this.casStyle.imageWidth = canvasw - 10;
    this.casStyle.imageHeight = canvash - 10;
    this.$apply();
  };

  //绘制海报页面
  draw() {
    wx.showToast({
      icon: "loading",
      title: "海报生成中",
      duration: 1000,
      mask: true
    });
    //使用 wx.createContext 获取绘图上下文 context
    ctx = wx.createCanvasContext("canvas");

    ctx.drawImage('../assets/images/canvas.png', 0, 0, canvasw, canvash)

    //绘制红包金额
    ctx.setFontSize(40)
    ctx.setFillStyle('#FF3D29')
    ctx.fillText(this.money, canvasw / 2 - 10 , canvash / 3 + 75)

    //绘制找人码
    ctx.setFontSize(16)
    ctx.setFillStyle('#000000')
    ctx.fillText(this.code, canvasw / 3 - 25 , canvash / 3 * 2 - 65)

    console.log(canvasw, canvash);
    text = this.intro;

    //分隔内容，每16字符一行
    const getContentBlock = (content = '') => {
      let result = [];
      if (typeof content === 'string') {
        //将文字分行，每16个字符一行
        const COUNT_PER_BLOCK = 16;
        for (let offset = 0, l = content.length; offset < l;) {
          let start = offset;
          let end = offset + COUNT_PER_BLOCK;
          let block = content.substring(start, end);
          result.push(block);
          offset += COUNT_PER_BLOCK;
        }
      }

      return result;
    }

    const contentX = canvasw / 3 - 25;
    const contentY = canvash / 3 * 2 - 40;
    const fixHeight = 20;
    let contentBlocks = getContentBlock(text);
    ctx.setFontSize(16);

    for (let i = 0, l = contentBlocks.length; i < l; i++) {
      let x = contentX;
      let y = contentY + fixHeight * i;
      console.log(x, y, contentBlocks[i]);
      ctx.fillText(contentBlocks[i], x, y);
    }

    //绘制小程序二维码
    ctx.drawImage(this.posterSrc, canvasw / 3, canvash * 3 / 4 + 10, canvasw - 250, canvash - 480)
    ctx.draw(true)
  };

  imageLoad(e) {
     //用来计算高宽
     this.imageStyle = this.wxAutoImageCal(e);
     this.$apply();
  };

  wxAutoImageCal(e) {
     //获取图片的原始长宽
     var originalWidth = e.detail.width;
     var originalHeight = e.detail.height;
     var windowWidth = 0, windowHeight = 0;
     var imageWidth= 0, imageHeight= 0;
     var results = {};
     //获取屏幕信息
     wx.getSystemInfo({
       success: function(res) {
         windowWidth = res.windowWidth;
         windowHeight = res.windowHeight;
         //判断按照那种方式进行缩放
         if(originalWidth > windowWidth) { //在图片width大于手机屏幕width时候
           imageWidth = windowWidth;
           imageHeight= (imageWidth*originalHeight)/originalWidth;
           results.imageWidth = imageWidth - 40;
           results.imageHeight = imageHeight - 30;
         } else { //否则展示原来的数据
           results.imageWidth= originalWidth;
           results.imageHeight= originalHeight;
         }
       }
     })
     console.log(results);
     return results;
  };

  onReady() {

  }

  onShow() {

  }
}
</script>
<style lang="less">
page {
  width: 100%;
  height: 100%;
  background-color: #180b25;
}

.container {
  width: 100%;
  height: 100%;
  overflow: hidden;
  position: fixed;
}

.poster {
  position: absolute;
  width: 100%;
  top: 20rpx;
  left: 0;
  z-index: 9;
  .casContainer {
    margin: 20 auto;
    box-sizing: border-box;
    overflow: hidden;
    canvas {
      width: 100%;
      height: 100%;
    }
    image {
      width: 200px;
      height: 200px;
      z-index: 10;
    }
  }
  .center {
    text-align: center;
    margin-top: 20rpx;
    .ad {
      width: 609rpx;
      height: 54rpx;
    }
  }
}

.shareFriendsDesc {
  text-align: center;
  width: 100%;
  margin-top: 20rpx;
  image {
    width: 627rpx;
    height: 102rpx;
  }
}

.shareFriendsButton {
  position: absolute;
  bottom: 20rpx;
  left: 0;
  text-align: center;
  width: 100%;
  image {
    width: 627rpx;
    height: 94rpx;
  }
}
</style>
